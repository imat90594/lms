<?php


function custom_commerce_menu(){
    $items['buy/%'] = array(
        'title' 		   => 'Buy',
        'description' 	   => 'Creating order',
        'page callback'    => 'buy_course',
        'page arguments'   => array(1),
        'access callback' => TRUE,
    );
		
    return $items;
}


function buy_course($product_id){
	global $user;

	// Create the new order in checkout; you might also check first to
	// see if your user already has an order to use instead of a new one.
	$order = commerce_order_new($user->uid, 'checkout_checkout');
	// Save the order to get its ID.
	commerce_order_save($order);
	
	// Link anonymous user session to the cart
	if (!$user->uid) {
	    commerce_cart_order_session_save($order->order_id);
	}
	
	// Load whatever product represents the item the customer will be
	// paying for and create a line item for it.
	$product = commerce_product_load($product_id);
	
	if($product) {
		$line_item = commerce_product_line_item_new($product, 1, $order->order_id);
		
		// Save the line item to get its ID.
		commerce_line_item_save($line_item);
		
		// Add the line item to the order using fago's rockin' wrapper.
		$order_wrapper = entity_metadata_wrapper('commerce_order', $order);
		$order_wrapper->commerce_line_items[] = $line_item;
		
		// Save the order again to update its line item reference field.
		commerce_order_save($order);
		
		// Redirect to the order's checkout form. Obviously, if this were a
		// form submit handler, you'd just set $form_state['redirect'].
		drupal_goto('checkout/' . $order->order_id);
		
	} else {
		drupal_goto('/');
	}
	
}




function custom_commerce_commerce_checkout_complete($order) {
  	
  	$products = array();
	$other_line_items = array();
	
	
	//extract the product line items
	foreach ($order->commerce_line_items as $delta => $line_item_wrapper) {
		foreach ($order->commerce_line_items['und'] as $line_item_id) {

			//get product line item by line item id
			$product_line_item  = commerce_line_item_load($line_item_id["line_item_id"]);
			
			if($product_line_item->type == "product") {
				//get product id by product line item
				$product_id = $product_line_item->data['context']['product_ids'][0];
				
				//get product details by product id
				$product = commerce_product_load($product_id);
				
				//insert product line item to be used in further details
				$product->product_line_item = $product_line_item;
		
				$products[] = $product;
			}
			else {
				$other_line_items[] = $product_line_item;
			}
		}
	}	
	
	//get the template
	$invoice_receipt_template = theme('invoice_receipt_email', array('order_obj' => array(
		"order" 	=> $order,
		"products"  => $products,
		"other_line_items" => $other_line_items
	)));
	
	//prepare the email details
	$email_details = array(
		"module"  => "custom_commerce",
		"key"	  => "invoice_receipt_email",
		"to"  	  => $order->mail,
		"from"    => variable_get('site_mail', ''),
		"subject" => "Invoice Receipt for Order # $order->order_number",
		"body"    => $invoice_receipt_template
	);
	
	//send email invoice receipt to recipient
	$send_receipt = custom_commerce_mail_send($email_details);
}


//-----------------------------------------------------------------------------
//forms overrides

function custom_commerce_form_alter(&$form, &$form_state, $form_id){
	
  $form_name = explode("_", $form_id);
  unset($form_name[count($form_name) - 1]);
  $form_name = implode("_", $form_name);
  
  if($form_name  == "commerce_cart_add_to_cart_form") {
  	$form['submit']['#value'] = "Buy Now";
  }

}



//-----------------------------------------------------------------------------
//mail functions

function custom_commerce_mail_send(array $values = array()) {
    $module   = $values['module'];
    $key 	  = $values['key'];
    $to 	  = $values['to'];
    $from 	  = $values['from'];
    $language = isset($values['lang']) ? $values['lang'] : language_default();
    $params   = array(
        'subject' => $values['subject'],
        'body' 	  => $values['body'],
    );
	
	
    if(array_key_exists('headers', $values)) {
        $params['headers'] = $values['headers']; //Assumed as an array
    }
    
    $send = TRUE;
	
    $mail = drupal_mail($module, $key, $to, $language, $params, $from, $send);
    
    if($mail['result']) {
        return TRUE;
    } else {
        $error_msg = 'Failed to send the email in custom_commerce Module';
        watchdog('canvas-email', $error_msg, array(), WATCHDOG_ALERT);
        return FALSE;
    }
}



/**
 * Implements hook_mail_alter()
 * @param string $message
 */
function custom_commerce_mail_alter(&$message) {
    $headers = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/html; charset=iso-8859-1; format=flowed',
        'Content-Transfer-Encoding' => '8Bit',
        'X-Mailer' => 'Drupal',
    );
    foreach ($headers as $key => $value) {
        $message['headers'][$key] = $value;
    }
}

/**
 * Implements hook_mail()
 * @param string $key
 * @param string $message
 * @param unknown_type $params
 */
function custom_commerce_mail($key, &$message, $params) {
    //Language Selection
    $options = array(
        'langcode' => $message['language']->language,
    );
	
 	$message['subject']   = $params['subject'];
    $message['body'][]    = isset($params['body']) ? $params['body'] : NULL;
    
    if (isset($params['headers']) && is_array($params['headers'])) {
        $message['headers'] += $params['headers'];
    }
}



/**
 * Implements hook_theme();
 */
function custom_commerce_theme($existing, $type, $theme, $path) {
  if($type == 'module') {
    return array(
      'invoice_receipt_email' => array(
        'variables' => array(
          'order_obj' => array(
		  	"order" => NULL,
		  	"products" => NULL,
		  	"other_line_items" => NULL
		  ),
        ),
        'template' => 'invoice_receipt',
        'path' => drupal_get_path('module', 'custom_commerce').'/template',
      )
    );
  }
}




